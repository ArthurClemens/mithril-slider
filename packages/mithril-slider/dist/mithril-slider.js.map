{"version":3,"file":"mithril-slider.js","sources":["../src/prop.js","../node_modules/hammerjs/hammer.js","../src/touch.js","../src/classes.js","../src/index.js","../src/css.mjs"],"sourcesContent":["\nexport default x => {\n  let p = x;\n  return args => {\n    if (args === undefined) {\n      return p;\n    } else {\n      p = args;\n    }\n  };\n};\n","/*! Hammer.JS - v2.0.7 - 2016-04-22\n * http://hammerjs.github.io/\n *\n * Copyright (c) 2016 Jorik Tangelder;\n * Licensed under the MIT license */\n(function(window, document, exportName, undefined) {\n  'use strict';\n\nvar VENDOR_PREFIXES = ['', 'webkit', 'Moz', 'MS', 'ms', 'o'];\nvar TEST_ELEMENT = document.createElement('div');\n\nvar TYPE_FUNCTION = 'function';\n\nvar round = Math.round;\nvar abs = Math.abs;\nvar now = Date.now;\n\n/**\n * set a timeout with a given scope\n * @param {Function} fn\n * @param {Number} timeout\n * @param {Object} context\n * @returns {number}\n */\nfunction setTimeoutContext(fn, timeout, context) {\n    return setTimeout(bindFn(fn, context), timeout);\n}\n\n/**\n * if the argument is an array, we want to execute the fn on each entry\n * if it aint an array we don't want to do a thing.\n * this is used by all the methods that accept a single and array argument.\n * @param {*|Array} arg\n * @param {String} fn\n * @param {Object} [context]\n * @returns {Boolean}\n */\nfunction invokeArrayArg(arg, fn, context) {\n    if (Array.isArray(arg)) {\n        each(arg, context[fn], context);\n        return true;\n    }\n    return false;\n}\n\n/**\n * walk objects and arrays\n * @param {Object} obj\n * @param {Function} iterator\n * @param {Object} context\n */\nfunction each(obj, iterator, context) {\n    var i;\n\n    if (!obj) {\n        return;\n    }\n\n    if (obj.forEach) {\n        obj.forEach(iterator, context);\n    } else if (obj.length !== undefined) {\n        i = 0;\n        while (i < obj.length) {\n            iterator.call(context, obj[i], i, obj);\n            i++;\n        }\n    } else {\n        for (i in obj) {\n            obj.hasOwnProperty(i) && iterator.call(context, obj[i], i, obj);\n        }\n    }\n}\n\n/**\n * wrap a method with a deprecation warning and stack trace\n * @param {Function} method\n * @param {String} name\n * @param {String} message\n * @returns {Function} A new function wrapping the supplied method.\n */\nfunction deprecate(method, name, message) {\n    var deprecationMessage = 'DEPRECATED METHOD: ' + name + '\\n' + message + ' AT \\n';\n    return function() {\n        var e = new Error('get-stack-trace');\n        var stack = e && e.stack ? e.stack.replace(/^[^\\(]+?[\\n$]/gm, '')\n            .replace(/^\\s+at\\s+/gm, '')\n            .replace(/^Object.<anonymous>\\s*\\(/gm, '{anonymous}()@') : 'Unknown Stack Trace';\n\n        var log = window.console && (window.console.warn || window.console.log);\n        if (log) {\n            log.call(window.console, deprecationMessage, stack);\n        }\n        return method.apply(this, arguments);\n    };\n}\n\n/**\n * extend object.\n * means that properties in dest will be overwritten by the ones in src.\n * @param {Object} target\n * @param {...Object} objects_to_assign\n * @returns {Object} target\n */\nvar assign;\nif (typeof Object.assign !== 'function') {\n    assign = function assign(target) {\n        if (target === undefined || target === null) {\n            throw new TypeError('Cannot convert undefined or null to object');\n        }\n\n        var output = Object(target);\n        for (var index = 1; index < arguments.length; index++) {\n            var source = arguments[index];\n            if (source !== undefined && source !== null) {\n                for (var nextKey in source) {\n                    if (source.hasOwnProperty(nextKey)) {\n                        output[nextKey] = source[nextKey];\n                    }\n                }\n            }\n        }\n        return output;\n    };\n} else {\n    assign = Object.assign;\n}\n\n/**\n * extend object.\n * means that properties in dest will be overwritten by the ones in src.\n * @param {Object} dest\n * @param {Object} src\n * @param {Boolean} [merge=false]\n * @returns {Object} dest\n */\nvar extend = deprecate(function extend(dest, src, merge) {\n    var keys = Object.keys(src);\n    var i = 0;\n    while (i < keys.length) {\n        if (!merge || (merge && dest[keys[i]] === undefined)) {\n            dest[keys[i]] = src[keys[i]];\n        }\n        i++;\n    }\n    return dest;\n}, 'extend', 'Use `assign`.');\n\n/**\n * merge the values from src in the dest.\n * means that properties that exist in dest will not be overwritten by src\n * @param {Object} dest\n * @param {Object} src\n * @returns {Object} dest\n */\nvar merge = deprecate(function merge(dest, src) {\n    return extend(dest, src, true);\n}, 'merge', 'Use `assign`.');\n\n/**\n * simple class inheritance\n * @param {Function} child\n * @param {Function} base\n * @param {Object} [properties]\n */\nfunction inherit(child, base, properties) {\n    var baseP = base.prototype,\n        childP;\n\n    childP = child.prototype = Object.create(baseP);\n    childP.constructor = child;\n    childP._super = baseP;\n\n    if (properties) {\n        assign(childP, properties);\n    }\n}\n\n/**\n * simple function bind\n * @param {Function} fn\n * @param {Object} context\n * @returns {Function}\n */\nfunction bindFn(fn, context) {\n    return function boundFn() {\n        return fn.apply(context, arguments);\n    };\n}\n\n/**\n * let a boolean value also be a function that must return a boolean\n * this first item in args will be used as the context\n * @param {Boolean|Function} val\n * @param {Array} [args]\n * @returns {Boolean}\n */\nfunction boolOrFn(val, args) {\n    if (typeof val == TYPE_FUNCTION) {\n        return val.apply(args ? args[0] || undefined : undefined, args);\n    }\n    return val;\n}\n\n/**\n * use the val2 when val1 is undefined\n * @param {*} val1\n * @param {*} val2\n * @returns {*}\n */\nfunction ifUndefined(val1, val2) {\n    return (val1 === undefined) ? val2 : val1;\n}\n\n/**\n * addEventListener with multiple events at once\n * @param {EventTarget} target\n * @param {String} types\n * @param {Function} handler\n */\nfunction addEventListeners(target, types, handler) {\n    each(splitStr(types), function(type) {\n        target.addEventListener(type, handler, false);\n    });\n}\n\n/**\n * removeEventListener with multiple events at once\n * @param {EventTarget} target\n * @param {String} types\n * @param {Function} handler\n */\nfunction removeEventListeners(target, types, handler) {\n    each(splitStr(types), function(type) {\n        target.removeEventListener(type, handler, false);\n    });\n}\n\n/**\n * find if a node is in the given parent\n * @method hasParent\n * @param {HTMLElement} node\n * @param {HTMLElement} parent\n * @return {Boolean} found\n */\nfunction hasParent(node, parent) {\n    while (node) {\n        if (node == parent) {\n            return true;\n        }\n        node = node.parentNode;\n    }\n    return false;\n}\n\n/**\n * small indexOf wrapper\n * @param {String} str\n * @param {String} find\n * @returns {Boolean} found\n */\nfunction inStr(str, find) {\n    return str.indexOf(find) > -1;\n}\n\n/**\n * split string on whitespace\n * @param {String} str\n * @returns {Array} words\n */\nfunction splitStr(str) {\n    return str.trim().split(/\\s+/g);\n}\n\n/**\n * find if a array contains the object using indexOf or a simple polyFill\n * @param {Array} src\n * @param {String} find\n * @param {String} [findByKey]\n * @return {Boolean|Number} false when not found, or the index\n */\nfunction inArray(src, find, findByKey) {\n    if (src.indexOf && !findByKey) {\n        return src.indexOf(find);\n    } else {\n        var i = 0;\n        while (i < src.length) {\n            if ((findByKey && src[i][findByKey] == find) || (!findByKey && src[i] === find)) {\n                return i;\n            }\n            i++;\n        }\n        return -1;\n    }\n}\n\n/**\n * convert array-like objects to real arrays\n * @param {Object} obj\n * @returns {Array}\n */\nfunction toArray(obj) {\n    return Array.prototype.slice.call(obj, 0);\n}\n\n/**\n * unique array with objects based on a key (like 'id') or just by the array's value\n * @param {Array} src [{id:1},{id:2},{id:1}]\n * @param {String} [key]\n * @param {Boolean} [sort=False]\n * @returns {Array} [{id:1},{id:2}]\n */\nfunction uniqueArray(src, key, sort) {\n    var results = [];\n    var values = [];\n    var i = 0;\n\n    while (i < src.length) {\n        var val = key ? src[i][key] : src[i];\n        if (inArray(values, val) < 0) {\n            results.push(src[i]);\n        }\n        values[i] = val;\n        i++;\n    }\n\n    if (sort) {\n        if (!key) {\n            results = results.sort();\n        } else {\n            results = results.sort(function sortUniqueArray(a, b) {\n                return a[key] > b[key];\n            });\n        }\n    }\n\n    return results;\n}\n\n/**\n * get the prefixed property\n * @param {Object} obj\n * @param {String} property\n * @returns {String|Undefined} prefixed\n */\nfunction prefixed(obj, property) {\n    var prefix, prop;\n    var camelProp = property[0].toUpperCase() + property.slice(1);\n\n    var i = 0;\n    while (i < VENDOR_PREFIXES.length) {\n        prefix = VENDOR_PREFIXES[i];\n        prop = (prefix) ? prefix + camelProp : property;\n\n        if (prop in obj) {\n            return prop;\n        }\n        i++;\n    }\n    return undefined;\n}\n\n/**\n * get a unique id\n * @returns {number} uniqueId\n */\nvar _uniqueId = 1;\nfunction uniqueId() {\n    return _uniqueId++;\n}\n\n/**\n * get the window object of an element\n * @param {HTMLElement} element\n * @returns {DocumentView|Window}\n */\nfunction getWindowForElement(element) {\n    var doc = element.ownerDocument || element;\n    return (doc.defaultView || doc.parentWindow || window);\n}\n\nvar MOBILE_REGEX = /mobile|tablet|ip(ad|hone|od)|android/i;\n\nvar SUPPORT_TOUCH = ('ontouchstart' in window);\nvar SUPPORT_POINTER_EVENTS = prefixed(window, 'PointerEvent') !== undefined;\nvar SUPPORT_ONLY_TOUCH = SUPPORT_TOUCH && MOBILE_REGEX.test(navigator.userAgent);\n\nvar INPUT_TYPE_TOUCH = 'touch';\nvar INPUT_TYPE_PEN = 'pen';\nvar INPUT_TYPE_MOUSE = 'mouse';\nvar INPUT_TYPE_KINECT = 'kinect';\n\nvar COMPUTE_INTERVAL = 25;\n\nvar INPUT_START = 1;\nvar INPUT_MOVE = 2;\nvar INPUT_END = 4;\nvar INPUT_CANCEL = 8;\n\nvar DIRECTION_NONE = 1;\nvar DIRECTION_LEFT = 2;\nvar DIRECTION_RIGHT = 4;\nvar DIRECTION_UP = 8;\nvar DIRECTION_DOWN = 16;\n\nvar DIRECTION_HORIZONTAL = DIRECTION_LEFT | DIRECTION_RIGHT;\nvar DIRECTION_VERTICAL = DIRECTION_UP | DIRECTION_DOWN;\nvar DIRECTION_ALL = DIRECTION_HORIZONTAL | DIRECTION_VERTICAL;\n\nvar PROPS_XY = ['x', 'y'];\nvar PROPS_CLIENT_XY = ['clientX', 'clientY'];\n\n/**\n * create new input type manager\n * @param {Manager} manager\n * @param {Function} callback\n * @returns {Input}\n * @constructor\n */\nfunction Input(manager, callback) {\n    var self = this;\n    this.manager = manager;\n    this.callback = callback;\n    this.element = manager.element;\n    this.target = manager.options.inputTarget;\n\n    // smaller wrapper around the handler, for the scope and the enabled state of the manager,\n    // so when disabled the input events are completely bypassed.\n    this.domHandler = function(ev) {\n        if (boolOrFn(manager.options.enable, [manager])) {\n            self.handler(ev);\n        }\n    };\n\n    this.init();\n\n}\n\nInput.prototype = {\n    /**\n     * should handle the inputEvent data and trigger the callback\n     * @virtual\n     */\n    handler: function() { },\n\n    /**\n     * bind the events\n     */\n    init: function() {\n        this.evEl && addEventListeners(this.element, this.evEl, this.domHandler);\n        this.evTarget && addEventListeners(this.target, this.evTarget, this.domHandler);\n        this.evWin && addEventListeners(getWindowForElement(this.element), this.evWin, this.domHandler);\n    },\n\n    /**\n     * unbind the events\n     */\n    destroy: function() {\n        this.evEl && removeEventListeners(this.element, this.evEl, this.domHandler);\n        this.evTarget && removeEventListeners(this.target, this.evTarget, this.domHandler);\n        this.evWin && removeEventListeners(getWindowForElement(this.element), this.evWin, this.domHandler);\n    }\n};\n\n/**\n * create new input type manager\n * called by the Manager constructor\n * @param {Hammer} manager\n * @returns {Input}\n */\nfunction createInputInstance(manager) {\n    var Type;\n    var inputClass = manager.options.inputClass;\n\n    if (inputClass) {\n        Type = inputClass;\n    } else if (SUPPORT_POINTER_EVENTS) {\n        Type = PointerEventInput;\n    } else if (SUPPORT_ONLY_TOUCH) {\n        Type = TouchInput;\n    } else if (!SUPPORT_TOUCH) {\n        Type = MouseInput;\n    } else {\n        Type = TouchMouseInput;\n    }\n    return new (Type)(manager, inputHandler);\n}\n\n/**\n * handle input events\n * @param {Manager} manager\n * @param {String} eventType\n * @param {Object} input\n */\nfunction inputHandler(manager, eventType, input) {\n    var pointersLen = input.pointers.length;\n    var changedPointersLen = input.changedPointers.length;\n    var isFirst = (eventType & INPUT_START && (pointersLen - changedPointersLen === 0));\n    var isFinal = (eventType & (INPUT_END | INPUT_CANCEL) && (pointersLen - changedPointersLen === 0));\n\n    input.isFirst = !!isFirst;\n    input.isFinal = !!isFinal;\n\n    if (isFirst) {\n        manager.session = {};\n    }\n\n    // source event is the normalized value of the domEvents\n    // like 'touchstart, mouseup, pointerdown'\n    input.eventType = eventType;\n\n    // compute scale, rotation etc\n    computeInputData(manager, input);\n\n    // emit secret event\n    manager.emit('hammer.input', input);\n\n    manager.recognize(input);\n    manager.session.prevInput = input;\n}\n\n/**\n * extend the data with some usable properties like scale, rotate, velocity etc\n * @param {Object} manager\n * @param {Object} input\n */\nfunction computeInputData(manager, input) {\n    var session = manager.session;\n    var pointers = input.pointers;\n    var pointersLength = pointers.length;\n\n    // store the first input to calculate the distance and direction\n    if (!session.firstInput) {\n        session.firstInput = simpleCloneInputData(input);\n    }\n\n    // to compute scale and rotation we need to store the multiple touches\n    if (pointersLength > 1 && !session.firstMultiple) {\n        session.firstMultiple = simpleCloneInputData(input);\n    } else if (pointersLength === 1) {\n        session.firstMultiple = false;\n    }\n\n    var firstInput = session.firstInput;\n    var firstMultiple = session.firstMultiple;\n    var offsetCenter = firstMultiple ? firstMultiple.center : firstInput.center;\n\n    var center = input.center = getCenter(pointers);\n    input.timeStamp = now();\n    input.deltaTime = input.timeStamp - firstInput.timeStamp;\n\n    input.angle = getAngle(offsetCenter, center);\n    input.distance = getDistance(offsetCenter, center);\n\n    computeDeltaXY(session, input);\n    input.offsetDirection = getDirection(input.deltaX, input.deltaY);\n\n    var overallVelocity = getVelocity(input.deltaTime, input.deltaX, input.deltaY);\n    input.overallVelocityX = overallVelocity.x;\n    input.overallVelocityY = overallVelocity.y;\n    input.overallVelocity = (abs(overallVelocity.x) > abs(overallVelocity.y)) ? overallVelocity.x : overallVelocity.y;\n\n    input.scale = firstMultiple ? getScale(firstMultiple.pointers, pointers) : 1;\n    input.rotation = firstMultiple ? getRotation(firstMultiple.pointers, pointers) : 0;\n\n    input.maxPointers = !session.prevInput ? input.pointers.length : ((input.pointers.length >\n        session.prevInput.maxPointers) ? input.pointers.length : session.prevInput.maxPointers);\n\n    computeIntervalInputData(session, input);\n\n    // find the correct target\n    var target = manager.element;\n    if (hasParent(input.srcEvent.target, target)) {\n        target = input.srcEvent.target;\n    }\n    input.target = target;\n}\n\nfunction computeDeltaXY(session, input) {\n    var center = input.center;\n    var offset = session.offsetDelta || {};\n    var prevDelta = session.prevDelta || {};\n    var prevInput = session.prevInput || {};\n\n    if (input.eventType === INPUT_START || prevInput.eventType === INPUT_END) {\n        prevDelta = session.prevDelta = {\n            x: prevInput.deltaX || 0,\n            y: prevInput.deltaY || 0\n        };\n\n        offset = session.offsetDelta = {\n            x: center.x,\n            y: center.y\n        };\n    }\n\n    input.deltaX = prevDelta.x + (center.x - offset.x);\n    input.deltaY = prevDelta.y + (center.y - offset.y);\n}\n\n/**\n * velocity is calculated every x ms\n * @param {Object} session\n * @param {Object} input\n */\nfunction computeIntervalInputData(session, input) {\n    var last = session.lastInterval || input,\n        deltaTime = input.timeStamp - last.timeStamp,\n        velocity, velocityX, velocityY, direction;\n\n    if (input.eventType != INPUT_CANCEL && (deltaTime > COMPUTE_INTERVAL || last.velocity === undefined)) {\n        var deltaX = input.deltaX - last.deltaX;\n        var deltaY = input.deltaY - last.deltaY;\n\n        var v = getVelocity(deltaTime, deltaX, deltaY);\n        velocityX = v.x;\n        velocityY = v.y;\n        velocity = (abs(v.x) > abs(v.y)) ? v.x : v.y;\n        direction = getDirection(deltaX, deltaY);\n\n        session.lastInterval = input;\n    } else {\n        // use latest velocity info if it doesn't overtake a minimum period\n        velocity = last.velocity;\n        velocityX = last.velocityX;\n        velocityY = last.velocityY;\n        direction = last.direction;\n    }\n\n    input.velocity = velocity;\n    input.velocityX = velocityX;\n    input.velocityY = velocityY;\n    input.direction = direction;\n}\n\n/**\n * create a simple clone from the input used for storage of firstInput and firstMultiple\n * @param {Object} input\n * @returns {Object} clonedInputData\n */\nfunction simpleCloneInputData(input) {\n    // make a simple copy of the pointers because we will get a reference if we don't\n    // we only need clientXY for the calculations\n    var pointers = [];\n    var i = 0;\n    while (i < input.pointers.length) {\n        pointers[i] = {\n            clientX: round(input.pointers[i].clientX),\n            clientY: round(input.pointers[i].clientY)\n        };\n        i++;\n    }\n\n    return {\n        timeStamp: now(),\n        pointers: pointers,\n        center: getCenter(pointers),\n        deltaX: input.deltaX,\n        deltaY: input.deltaY\n    };\n}\n\n/**\n * get the center of all the pointers\n * @param {Array} pointers\n * @return {Object} center contains `x` and `y` properties\n */\nfunction getCenter(pointers) {\n    var pointersLength = pointers.length;\n\n    // no need to loop when only one touch\n    if (pointersLength === 1) {\n        return {\n            x: round(pointers[0].clientX),\n            y: round(pointers[0].clientY)\n        };\n    }\n\n    var x = 0, y = 0, i = 0;\n    while (i < pointersLength) {\n        x += pointers[i].clientX;\n        y += pointers[i].clientY;\n        i++;\n    }\n\n    return {\n        x: round(x / pointersLength),\n        y: round(y / pointersLength)\n    };\n}\n\n/**\n * calculate the velocity between two points. unit is in px per ms.\n * @param {Number} deltaTime\n * @param {Number} x\n * @param {Number} y\n * @return {Object} velocity `x` and `y`\n */\nfunction getVelocity(deltaTime, x, y) {\n    return {\n        x: x / deltaTime || 0,\n        y: y / deltaTime || 0\n    };\n}\n\n/**\n * get the direction between two points\n * @param {Number} x\n * @param {Number} y\n * @return {Number} direction\n */\nfunction getDirection(x, y) {\n    if (x === y) {\n        return DIRECTION_NONE;\n    }\n\n    if (abs(x) >= abs(y)) {\n        return x < 0 ? DIRECTION_LEFT : DIRECTION_RIGHT;\n    }\n    return y < 0 ? DIRECTION_UP : DIRECTION_DOWN;\n}\n\n/**\n * calculate the absolute distance between two points\n * @param {Object} p1 {x, y}\n * @param {Object} p2 {x, y}\n * @param {Array} [props] containing x and y keys\n * @return {Number} distance\n */\nfunction getDistance(p1, p2, props) {\n    if (!props) {\n        props = PROPS_XY;\n    }\n    var x = p2[props[0]] - p1[props[0]],\n        y = p2[props[1]] - p1[props[1]];\n\n    return Math.sqrt((x * x) + (y * y));\n}\n\n/**\n * calculate the angle between two coordinates\n * @param {Object} p1\n * @param {Object} p2\n * @param {Array} [props] containing x and y keys\n * @return {Number} angle\n */\nfunction getAngle(p1, p2, props) {\n    if (!props) {\n        props = PROPS_XY;\n    }\n    var x = p2[props[0]] - p1[props[0]],\n        y = p2[props[1]] - p1[props[1]];\n    return Math.atan2(y, x) * 180 / Math.PI;\n}\n\n/**\n * calculate the rotation degrees between two pointersets\n * @param {Array} start array of pointers\n * @param {Array} end array of pointers\n * @return {Number} rotation\n */\nfunction getRotation(start, end) {\n    return getAngle(end[1], end[0], PROPS_CLIENT_XY) + getAngle(start[1], start[0], PROPS_CLIENT_XY);\n}\n\n/**\n * calculate the scale factor between two pointersets\n * no scale is 1, and goes down to 0 when pinched together, and bigger when pinched out\n * @param {Array} start array of pointers\n * @param {Array} end array of pointers\n * @return {Number} scale\n */\nfunction getScale(start, end) {\n    return getDistance(end[0], end[1], PROPS_CLIENT_XY) / getDistance(start[0], start[1], PROPS_CLIENT_XY);\n}\n\nvar MOUSE_INPUT_MAP = {\n    mousedown: INPUT_START,\n    mousemove: INPUT_MOVE,\n    mouseup: INPUT_END\n};\n\nvar MOUSE_ELEMENT_EVENTS = 'mousedown';\nvar MOUSE_WINDOW_EVENTS = 'mousemove mouseup';\n\n/**\n * Mouse events input\n * @constructor\n * @extends Input\n */\nfunction MouseInput() {\n    this.evEl = MOUSE_ELEMENT_EVENTS;\n    this.evWin = MOUSE_WINDOW_EVENTS;\n\n    this.pressed = false; // mousedown state\n\n    Input.apply(this, arguments);\n}\n\ninherit(MouseInput, Input, {\n    /**\n     * handle mouse events\n     * @param {Object} ev\n     */\n    handler: function MEhandler(ev) {\n        var eventType = MOUSE_INPUT_MAP[ev.type];\n\n        // on start we want to have the left mouse button down\n        if (eventType & INPUT_START && ev.button === 0) {\n            this.pressed = true;\n        }\n\n        if (eventType & INPUT_MOVE && ev.which !== 1) {\n            eventType = INPUT_END;\n        }\n\n        // mouse must be down\n        if (!this.pressed) {\n            return;\n        }\n\n        if (eventType & INPUT_END) {\n            this.pressed = false;\n        }\n\n        this.callback(this.manager, eventType, {\n            pointers: [ev],\n            changedPointers: [ev],\n            pointerType: INPUT_TYPE_MOUSE,\n            srcEvent: ev\n        });\n    }\n});\n\nvar POINTER_INPUT_MAP = {\n    pointerdown: INPUT_START,\n    pointermove: INPUT_MOVE,\n    pointerup: INPUT_END,\n    pointercancel: INPUT_CANCEL,\n    pointerout: INPUT_CANCEL\n};\n\n// in IE10 the pointer types is defined as an enum\nvar IE10_POINTER_TYPE_ENUM = {\n    2: INPUT_TYPE_TOUCH,\n    3: INPUT_TYPE_PEN,\n    4: INPUT_TYPE_MOUSE,\n    5: INPUT_TYPE_KINECT // see https://twitter.com/jacobrossi/status/480596438489890816\n};\n\nvar POINTER_ELEMENT_EVENTS = 'pointerdown';\nvar POINTER_WINDOW_EVENTS = 'pointermove pointerup pointercancel';\n\n// IE10 has prefixed support, and case-sensitive\nif (window.MSPointerEvent && !window.PointerEvent) {\n    POINTER_ELEMENT_EVENTS = 'MSPointerDown';\n    POINTER_WINDOW_EVENTS = 'MSPointerMove MSPointerUp MSPointerCancel';\n}\n\n/**\n * Pointer events input\n * @constructor\n * @extends Input\n */\nfunction PointerEventInput() {\n    this.evEl = POINTER_ELEMENT_EVENTS;\n    this.evWin = POINTER_WINDOW_EVENTS;\n\n    Input.apply(this, arguments);\n\n    this.store = (this.manager.session.pointerEvents = []);\n}\n\ninherit(PointerEventInput, Input, {\n    /**\n     * handle mouse events\n     * @param {Object} ev\n     */\n    handler: function PEhandler(ev) {\n        var store = this.store;\n        var removePointer = false;\n\n        var eventTypeNormalized = ev.type.toLowerCase().replace('ms', '');\n        var eventType = POINTER_INPUT_MAP[eventTypeNormalized];\n        var pointerType = IE10_POINTER_TYPE_ENUM[ev.pointerType] || ev.pointerType;\n\n        var isTouch = (pointerType == INPUT_TYPE_TOUCH);\n\n        // get index of the event in the store\n        var storeIndex = inArray(store, ev.pointerId, 'pointerId');\n\n        // start and mouse must be down\n        if (eventType & INPUT_START && (ev.button === 0 || isTouch)) {\n            if (storeIndex < 0) {\n                store.push(ev);\n                storeIndex = store.length - 1;\n            }\n        } else if (eventType & (INPUT_END | INPUT_CANCEL)) {\n            removePointer = true;\n        }\n\n        // it not found, so the pointer hasn't been down (so it's probably a hover)\n        if (storeIndex < 0) {\n            return;\n        }\n\n        // update the event in the store\n        store[storeIndex] = ev;\n\n        this.callback(this.manager, eventType, {\n            pointers: store,\n            changedPointers: [ev],\n            pointerType: pointerType,\n            srcEvent: ev\n        });\n\n        if (removePointer) {\n            // remove from the store\n            store.splice(storeIndex, 1);\n        }\n    }\n});\n\nvar SINGLE_TOUCH_INPUT_MAP = {\n    touchstart: INPUT_START,\n    touchmove: INPUT_MOVE,\n    touchend: INPUT_END,\n    touchcancel: INPUT_CANCEL\n};\n\nvar SINGLE_TOUCH_TARGET_EVENTS = 'touchstart';\nvar SINGLE_TOUCH_WINDOW_EVENTS = 'touchstart touchmove touchend touchcancel';\n\n/**\n * Touch events input\n * @constructor\n * @extends Input\n */\nfunction SingleTouchInput() {\n    this.evTarget = SINGLE_TOUCH_TARGET_EVENTS;\n    this.evWin = SINGLE_TOUCH_WINDOW_EVENTS;\n    this.started = false;\n\n    Input.apply(this, arguments);\n}\n\ninherit(SingleTouchInput, Input, {\n    handler: function TEhandler(ev) {\n        var type = SINGLE_TOUCH_INPUT_MAP[ev.type];\n\n        // should we handle the touch events?\n        if (type === INPUT_START) {\n            this.started = true;\n        }\n\n        if (!this.started) {\n            return;\n        }\n\n        var touches = normalizeSingleTouches.call(this, ev, type);\n\n        // when done, reset the started state\n        if (type & (INPUT_END | INPUT_CANCEL) && touches[0].length - touches[1].length === 0) {\n            this.started = false;\n        }\n\n        this.callback(this.manager, type, {\n            pointers: touches[0],\n            changedPointers: touches[1],\n            pointerType: INPUT_TYPE_TOUCH,\n            srcEvent: ev\n        });\n    }\n});\n\n/**\n * @this {TouchInput}\n * @param {Object} ev\n * @param {Number} type flag\n * @returns {undefined|Array} [all, changed]\n */\nfunction normalizeSingleTouches(ev, type) {\n    var all = toArray(ev.touches);\n    var changed = toArray(ev.changedTouches);\n\n    if (type & (INPUT_END | INPUT_CANCEL)) {\n        all = uniqueArray(all.concat(changed), 'identifier', true);\n    }\n\n    return [all, changed];\n}\n\nvar TOUCH_INPUT_MAP = {\n    touchstart: INPUT_START,\n    touchmove: INPUT_MOVE,\n    touchend: INPUT_END,\n    touchcancel: INPUT_CANCEL\n};\n\nvar TOUCH_TARGET_EVENTS = 'touchstart touchmove touchend touchcancel';\n\n/**\n * Multi-user touch events input\n * @constructor\n * @extends Input\n */\nfunction TouchInput() {\n    this.evTarget = TOUCH_TARGET_EVENTS;\n    this.targetIds = {};\n\n    Input.apply(this, arguments);\n}\n\ninherit(TouchInput, Input, {\n    handler: function MTEhandler(ev) {\n        var type = TOUCH_INPUT_MAP[ev.type];\n        var touches = getTouches.call(this, ev, type);\n        if (!touches) {\n            return;\n        }\n\n        this.callback(this.manager, type, {\n            pointers: touches[0],\n            changedPointers: touches[1],\n            pointerType: INPUT_TYPE_TOUCH,\n            srcEvent: ev\n        });\n    }\n});\n\n/**\n * @this {TouchInput}\n * @param {Object} ev\n * @param {Number} type flag\n * @returns {undefined|Array} [all, changed]\n */\nfunction getTouches(ev, type) {\n    var allTouches = toArray(ev.touches);\n    var targetIds = this.targetIds;\n\n    // when there is only one touch, the process can be simplified\n    if (type & (INPUT_START | INPUT_MOVE) && allTouches.length === 1) {\n        targetIds[allTouches[0].identifier] = true;\n        return [allTouches, allTouches];\n    }\n\n    var i,\n        targetTouches,\n        changedTouches = toArray(ev.changedTouches),\n        changedTargetTouches = [],\n        target = this.target;\n\n    // get target touches from touches\n    targetTouches = allTouches.filter(function(touch) {\n        return hasParent(touch.target, target);\n    });\n\n    // collect touches\n    if (type === INPUT_START) {\n        i = 0;\n        while (i < targetTouches.length) {\n            targetIds[targetTouches[i].identifier] = true;\n            i++;\n        }\n    }\n\n    // filter changed touches to only contain touches that exist in the collected target ids\n    i = 0;\n    while (i < changedTouches.length) {\n        if (targetIds[changedTouches[i].identifier]) {\n            changedTargetTouches.push(changedTouches[i]);\n        }\n\n        // cleanup removed touches\n        if (type & (INPUT_END | INPUT_CANCEL)) {\n            delete targetIds[changedTouches[i].identifier];\n        }\n        i++;\n    }\n\n    if (!changedTargetTouches.length) {\n        return;\n    }\n\n    return [\n        // merge targetTouches with changedTargetTouches so it contains ALL touches, including 'end' and 'cancel'\n        uniqueArray(targetTouches.concat(changedTargetTouches), 'identifier', true),\n        changedTargetTouches\n    ];\n}\n\n/**\n * Combined touch and mouse input\n *\n * Touch has a higher priority then mouse, and while touching no mouse events are allowed.\n * This because touch devices also emit mouse events while doing a touch.\n *\n * @constructor\n * @extends Input\n */\n\nvar DEDUP_TIMEOUT = 2500;\nvar DEDUP_DISTANCE = 25;\n\nfunction TouchMouseInput() {\n    Input.apply(this, arguments);\n\n    var handler = bindFn(this.handler, this);\n    this.touch = new TouchInput(this.manager, handler);\n    this.mouse = new MouseInput(this.manager, handler);\n\n    this.primaryTouch = null;\n    this.lastTouches = [];\n}\n\ninherit(TouchMouseInput, Input, {\n    /**\n     * handle mouse and touch events\n     * @param {Hammer} manager\n     * @param {String} inputEvent\n     * @param {Object} inputData\n     */\n    handler: function TMEhandler(manager, inputEvent, inputData) {\n        var isTouch = (inputData.pointerType == INPUT_TYPE_TOUCH),\n            isMouse = (inputData.pointerType == INPUT_TYPE_MOUSE);\n\n        if (isMouse && inputData.sourceCapabilities && inputData.sourceCapabilities.firesTouchEvents) {\n            return;\n        }\n\n        // when we're in a touch event, record touches to  de-dupe synthetic mouse event\n        if (isTouch) {\n            recordTouches.call(this, inputEvent, inputData);\n        } else if (isMouse && isSyntheticEvent.call(this, inputData)) {\n            return;\n        }\n\n        this.callback(manager, inputEvent, inputData);\n    },\n\n    /**\n     * remove the event listeners\n     */\n    destroy: function destroy() {\n        this.touch.destroy();\n        this.mouse.destroy();\n    }\n});\n\nfunction recordTouches(eventType, eventData) {\n    if (eventType & INPUT_START) {\n        this.primaryTouch = eventData.changedPointers[0].identifier;\n        setLastTouch.call(this, eventData);\n    } else if (eventType & (INPUT_END | INPUT_CANCEL)) {\n        setLastTouch.call(this, eventData);\n    }\n}\n\nfunction setLastTouch(eventData) {\n    var touch = eventData.changedPointers[0];\n\n    if (touch.identifier === this.primaryTouch) {\n        var lastTouch = {x: touch.clientX, y: touch.clientY};\n        this.lastTouches.push(lastTouch);\n        var lts = this.lastTouches;\n        var removeLastTouch = function() {\n            var i = lts.indexOf(lastTouch);\n            if (i > -1) {\n                lts.splice(i, 1);\n            }\n        };\n        setTimeout(removeLastTouch, DEDUP_TIMEOUT);\n    }\n}\n\nfunction isSyntheticEvent(eventData) {\n    var x = eventData.srcEvent.clientX, y = eventData.srcEvent.clientY;\n    for (var i = 0; i < this.lastTouches.length; i++) {\n        var t = this.lastTouches[i];\n        var dx = Math.abs(x - t.x), dy = Math.abs(y - t.y);\n        if (dx <= DEDUP_DISTANCE && dy <= DEDUP_DISTANCE) {\n            return true;\n        }\n    }\n    return false;\n}\n\nvar PREFIXED_TOUCH_ACTION = prefixed(TEST_ELEMENT.style, 'touchAction');\nvar NATIVE_TOUCH_ACTION = PREFIXED_TOUCH_ACTION !== undefined;\n\n// magical touchAction value\nvar TOUCH_ACTION_COMPUTE = 'compute';\nvar TOUCH_ACTION_AUTO = 'auto';\nvar TOUCH_ACTION_MANIPULATION = 'manipulation'; // not implemented\nvar TOUCH_ACTION_NONE = 'none';\nvar TOUCH_ACTION_PAN_X = 'pan-x';\nvar TOUCH_ACTION_PAN_Y = 'pan-y';\nvar TOUCH_ACTION_MAP = getTouchActionProps();\n\n/**\n * Touch Action\n * sets the touchAction property or uses the js alternative\n * @param {Manager} manager\n * @param {String} value\n * @constructor\n */\nfunction TouchAction(manager, value) {\n    this.manager = manager;\n    this.set(value);\n}\n\nTouchAction.prototype = {\n    /**\n     * set the touchAction value on the element or enable the polyfill\n     * @param {String} value\n     */\n    set: function(value) {\n        // find out the touch-action by the event handlers\n        if (value == TOUCH_ACTION_COMPUTE) {\n            value = this.compute();\n        }\n\n        if (NATIVE_TOUCH_ACTION && this.manager.element.style && TOUCH_ACTION_MAP[value]) {\n            this.manager.element.style[PREFIXED_TOUCH_ACTION] = value;\n        }\n        this.actions = value.toLowerCase().trim();\n    },\n\n    /**\n     * just re-set the touchAction value\n     */\n    update: function() {\n        this.set(this.manager.options.touchAction);\n    },\n\n    /**\n     * compute the value for the touchAction property based on the recognizer's settings\n     * @returns {String} value\n     */\n    compute: function() {\n        var actions = [];\n        each(this.manager.recognizers, function(recognizer) {\n            if (boolOrFn(recognizer.options.enable, [recognizer])) {\n                actions = actions.concat(recognizer.getTouchAction());\n            }\n        });\n        return cleanTouchActions(actions.join(' '));\n    },\n\n    /**\n     * this method is called on each input cycle and provides the preventing of the browser behavior\n     * @param {Object} input\n     */\n    preventDefaults: function(input) {\n        var srcEvent = input.srcEvent;\n        var direction = input.offsetDirection;\n\n        // if the touch action did prevented once this session\n        if (this.manager.session.prevented) {\n            srcEvent.preventDefault();\n            return;\n        }\n\n        var actions = this.actions;\n        var hasNone = inStr(actions, TOUCH_ACTION_NONE) && !TOUCH_ACTION_MAP[TOUCH_ACTION_NONE];\n        var hasPanY = inStr(actions, TOUCH_ACTION_PAN_Y) && !TOUCH_ACTION_MAP[TOUCH_ACTION_PAN_Y];\n        var hasPanX = inStr(actions, TOUCH_ACTION_PAN_X) && !TOUCH_ACTION_MAP[TOUCH_ACTION_PAN_X];\n\n        if (hasNone) {\n            //do not prevent defaults if this is a tap gesture\n\n            var isTapPointer = input.pointers.length === 1;\n            var isTapMovement = input.distance < 2;\n            var isTapTouchTime = input.deltaTime < 250;\n\n            if (isTapPointer && isTapMovement && isTapTouchTime) {\n                return;\n            }\n        }\n\n        if (hasPanX && hasPanY) {\n            // `pan-x pan-y` means browser handles all scrolling/panning, do not prevent\n            return;\n        }\n\n        if (hasNone ||\n            (hasPanY && direction & DIRECTION_HORIZONTAL) ||\n            (hasPanX && direction & DIRECTION_VERTICAL)) {\n            return this.preventSrc(srcEvent);\n        }\n    },\n\n    /**\n     * call preventDefault to prevent the browser's default behavior (scrolling in most cases)\n     * @param {Object} srcEvent\n     */\n    preventSrc: function(srcEvent) {\n        this.manager.session.prevented = true;\n        srcEvent.preventDefault();\n    }\n};\n\n/**\n * when the touchActions are collected they are not a valid value, so we need to clean things up. *\n * @param {String} actions\n * @returns {*}\n */\nfunction cleanTouchActions(actions) {\n    // none\n    if (inStr(actions, TOUCH_ACTION_NONE)) {\n        return TOUCH_ACTION_NONE;\n    }\n\n    var hasPanX = inStr(actions, TOUCH_ACTION_PAN_X);\n    var hasPanY = inStr(actions, TOUCH_ACTION_PAN_Y);\n\n    // if both pan-x and pan-y are set (different recognizers\n    // for different directions, e.g. horizontal pan but vertical swipe?)\n    // we need none (as otherwise with pan-x pan-y combined none of these\n    // recognizers will work, since the browser would handle all panning\n    if (hasPanX && hasPanY) {\n        return TOUCH_ACTION_NONE;\n    }\n\n    // pan-x OR pan-y\n    if (hasPanX || hasPanY) {\n        return hasPanX ? TOUCH_ACTION_PAN_X : TOUCH_ACTION_PAN_Y;\n    }\n\n    // manipulation\n    if (inStr(actions, TOUCH_ACTION_MANIPULATION)) {\n        return TOUCH_ACTION_MANIPULATION;\n    }\n\n    return TOUCH_ACTION_AUTO;\n}\n\nfunction getTouchActionProps() {\n    if (!NATIVE_TOUCH_ACTION) {\n        return false;\n    }\n    var touchMap = {};\n    var cssSupports = window.CSS && window.CSS.supports;\n    ['auto', 'manipulation', 'pan-y', 'pan-x', 'pan-x pan-y', 'none'].forEach(function(val) {\n\n        // If css.supports is not supported but there is native touch-action assume it supports\n        // all values. This is the case for IE 10 and 11.\n        touchMap[val] = cssSupports ? window.CSS.supports('touch-action', val) : true;\n    });\n    return touchMap;\n}\n\n/**\n * Recognizer flow explained; *\n * All recognizers have the initial state of POSSIBLE when a input session starts.\n * The definition of a input session is from the first input until the last input, with all it's movement in it. *\n * Example session for mouse-input: mousedown -> mousemove -> mouseup\n *\n * On each recognizing cycle (see Manager.recognize) the .recognize() method is executed\n * which determines with state it should be.\n *\n * If the recognizer has the state FAILED, CANCELLED or RECOGNIZED (equals ENDED), it is reset to\n * POSSIBLE to give it another change on the next cycle.\n *\n *               Possible\n *                  |\n *            +-----+---------------+\n *            |                     |\n *      +-----+-----+               |\n *      |           |               |\n *   Failed      Cancelled          |\n *                          +-------+------+\n *                          |              |\n *                      Recognized       Began\n *                                         |\n *                                      Changed\n *                                         |\n *                                  Ended/Recognized\n */\nvar STATE_POSSIBLE = 1;\nvar STATE_BEGAN = 2;\nvar STATE_CHANGED = 4;\nvar STATE_ENDED = 8;\nvar STATE_RECOGNIZED = STATE_ENDED;\nvar STATE_CANCELLED = 16;\nvar STATE_FAILED = 32;\n\n/**\n * Recognizer\n * Every recognizer needs to extend from this class.\n * @constructor\n * @param {Object} options\n */\nfunction Recognizer(options) {\n    this.options = assign({}, this.defaults, options || {});\n\n    this.id = uniqueId();\n\n    this.manager = null;\n\n    // default is enable true\n    this.options.enable = ifUndefined(this.options.enable, true);\n\n    this.state = STATE_POSSIBLE;\n\n    this.simultaneous = {};\n    this.requireFail = [];\n}\n\nRecognizer.prototype = {\n    /**\n     * @virtual\n     * @type {Object}\n     */\n    defaults: {},\n\n    /**\n     * set options\n     * @param {Object} options\n     * @return {Recognizer}\n     */\n    set: function(options) {\n        assign(this.options, options);\n\n        // also update the touchAction, in case something changed about the directions/enabled state\n        this.manager && this.manager.touchAction.update();\n        return this;\n    },\n\n    /**\n     * recognize simultaneous with an other recognizer.\n     * @param {Recognizer} otherRecognizer\n     * @returns {Recognizer} this\n     */\n    recognizeWith: function(otherRecognizer) {\n        if (invokeArrayArg(otherRecognizer, 'recognizeWith', this)) {\n            return this;\n        }\n\n        var simultaneous = this.simultaneous;\n        otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);\n        if (!simultaneous[otherRecognizer.id]) {\n            simultaneous[otherRecognizer.id] = otherRecognizer;\n            otherRecognizer.recognizeWith(this);\n        }\n        return this;\n    },\n\n    /**\n     * drop the simultaneous link. it doesnt remove the link on the other recognizer.\n     * @param {Recognizer} otherRecognizer\n     * @returns {Recognizer} this\n     */\n    dropRecognizeWith: function(otherRecognizer) {\n        if (invokeArrayArg(otherRecognizer, 'dropRecognizeWith', this)) {\n            return this;\n        }\n\n        otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);\n        delete this.simultaneous[otherRecognizer.id];\n        return this;\n    },\n\n    /**\n     * recognizer can only run when an other is failing\n     * @param {Recognizer} otherRecognizer\n     * @returns {Recognizer} this\n     */\n    requireFailure: function(otherRecognizer) {\n        if (invokeArrayArg(otherRecognizer, 'requireFailure', this)) {\n            return this;\n        }\n\n        var requireFail = this.requireFail;\n        otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);\n        if (inArray(requireFail, otherRecognizer) === -1) {\n            requireFail.push(otherRecognizer);\n            otherRecognizer.requireFailure(this);\n        }\n        return this;\n    },\n\n    /**\n     * drop the requireFailure link. it does not remove the link on the other recognizer.\n     * @param {Recognizer} otherRecognizer\n     * @returns {Recognizer} this\n     */\n    dropRequireFailure: function(otherRecognizer) {\n        if (invokeArrayArg(otherRecognizer, 'dropRequireFailure', this)) {\n            return this;\n        }\n\n        otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);\n        var index = inArray(this.requireFail, otherRecognizer);\n        if (index > -1) {\n            this.requireFail.splice(index, 1);\n        }\n        return this;\n    },\n\n    /**\n     * has require failures boolean\n     * @returns {boolean}\n     */\n    hasRequireFailures: function() {\n        return this.requireFail.length > 0;\n    },\n\n    /**\n     * if the recognizer can recognize simultaneous with an other recognizer\n     * @param {Recognizer} otherRecognizer\n     * @returns {Boolean}\n     */\n    canRecognizeWith: function(otherRecognizer) {\n        return !!this.simultaneous[otherRecognizer.id];\n    },\n\n    /**\n     * You should use `tryEmit` instead of `emit` directly to check\n     * that all the needed recognizers has failed before emitting.\n     * @param {Object} input\n     */\n    emit: function(input) {\n        var self = this;\n        var state = this.state;\n\n        function emit(event) {\n            self.manager.emit(event, input);\n        }\n\n        // 'panstart' and 'panmove'\n        if (state < STATE_ENDED) {\n            emit(self.options.event + stateStr(state));\n        }\n\n        emit(self.options.event); // simple 'eventName' events\n\n        if (input.additionalEvent) { // additional event(panleft, panright, pinchin, pinchout...)\n            emit(input.additionalEvent);\n        }\n\n        // panend and pancancel\n        if (state >= STATE_ENDED) {\n            emit(self.options.event + stateStr(state));\n        }\n    },\n\n    /**\n     * Check that all the require failure recognizers has failed,\n     * if true, it emits a gesture event,\n     * otherwise, setup the state to FAILED.\n     * @param {Object} input\n     */\n    tryEmit: function(input) {\n        if (this.canEmit()) {\n            return this.emit(input);\n        }\n        // it's failing anyway\n        this.state = STATE_FAILED;\n    },\n\n    /**\n     * can we emit?\n     * @returns {boolean}\n     */\n    canEmit: function() {\n        var i = 0;\n        while (i < this.requireFail.length) {\n            if (!(this.requireFail[i].state & (STATE_FAILED | STATE_POSSIBLE))) {\n                return false;\n            }\n            i++;\n        }\n        return true;\n    },\n\n    /**\n     * update the recognizer\n     * @param {Object} inputData\n     */\n    recognize: function(inputData) {\n        // make a new copy of the inputData\n        // so we can change the inputData without messing up the other recognizers\n        var inputDataClone = assign({}, inputData);\n\n        // is is enabled and allow recognizing?\n        if (!boolOrFn(this.options.enable, [this, inputDataClone])) {\n            this.reset();\n            this.state = STATE_FAILED;\n            return;\n        }\n\n        // reset when we've reached the end\n        if (this.state & (STATE_RECOGNIZED | STATE_CANCELLED | STATE_FAILED)) {\n            this.state = STATE_POSSIBLE;\n        }\n\n        this.state = this.process(inputDataClone);\n\n        // the recognizer has recognized a gesture\n        // so trigger an event\n        if (this.state & (STATE_BEGAN | STATE_CHANGED | STATE_ENDED | STATE_CANCELLED)) {\n            this.tryEmit(inputDataClone);\n        }\n    },\n\n    /**\n     * return the state of the recognizer\n     * the actual recognizing happens in this method\n     * @virtual\n     * @param {Object} inputData\n     * @returns {Const} STATE\n     */\n    process: function(inputData) { }, // jshint ignore:line\n\n    /**\n     * return the preferred touch-action\n     * @virtual\n     * @returns {Array}\n     */\n    getTouchAction: function() { },\n\n    /**\n     * called when the gesture isn't allowed to recognize\n     * like when another is being recognized or it is disabled\n     * @virtual\n     */\n    reset: function() { }\n};\n\n/**\n * get a usable string, used as event postfix\n * @param {Const} state\n * @returns {String} state\n */\nfunction stateStr(state) {\n    if (state & STATE_CANCELLED) {\n        return 'cancel';\n    } else if (state & STATE_ENDED) {\n        return 'end';\n    } else if (state & STATE_CHANGED) {\n        return 'move';\n    } else if (state & STATE_BEGAN) {\n        return 'start';\n    }\n    return '';\n}\n\n/**\n * direction cons to string\n * @param {Const} direction\n * @returns {String}\n */\nfunction directionStr(direction) {\n    if (direction == DIRECTION_DOWN) {\n        return 'down';\n    } else if (direction == DIRECTION_UP) {\n        return 'up';\n    } else if (direction == DIRECTION_LEFT) {\n        return 'left';\n    } else if (direction == DIRECTION_RIGHT) {\n        return 'right';\n    }\n    return '';\n}\n\n/**\n * get a recognizer by name if it is bound to a manager\n * @param {Recognizer|String} otherRecognizer\n * @param {Recognizer} recognizer\n * @returns {Recognizer}\n */\nfunction getRecognizerByNameIfManager(otherRecognizer, recognizer) {\n    var manager = recognizer.manager;\n    if (manager) {\n        return manager.get(otherRecognizer);\n    }\n    return otherRecognizer;\n}\n\n/**\n * This recognizer is just used as a base for the simple attribute recognizers.\n * @constructor\n * @extends Recognizer\n */\nfunction AttrRecognizer() {\n    Recognizer.apply(this, arguments);\n}\n\ninherit(AttrRecognizer, Recognizer, {\n    /**\n     * @namespace\n     * @memberof AttrRecognizer\n     */\n    defaults: {\n        /**\n         * @type {Number}\n         * @default 1\n         */\n        pointers: 1\n    },\n\n    /**\n     * Used to check if it the recognizer receives valid input, like input.distance > 10.\n     * @memberof AttrRecognizer\n     * @param {Object} input\n     * @returns {Boolean} recognized\n     */\n    attrTest: function(input) {\n        var optionPointers = this.options.pointers;\n        return optionPointers === 0 || input.pointers.length === optionPointers;\n    },\n\n    /**\n     * Process the input and return the state for the recognizer\n     * @memberof AttrRecognizer\n     * @param {Object} input\n     * @returns {*} State\n     */\n    process: function(input) {\n        var state = this.state;\n        var eventType = input.eventType;\n\n        var isRecognized = state & (STATE_BEGAN | STATE_CHANGED);\n        var isValid = this.attrTest(input);\n\n        // on cancel input and we've recognized before, return STATE_CANCELLED\n        if (isRecognized && (eventType & INPUT_CANCEL || !isValid)) {\n            return state | STATE_CANCELLED;\n        } else if (isRecognized || isValid) {\n            if (eventType & INPUT_END) {\n                return state | STATE_ENDED;\n            } else if (!(state & STATE_BEGAN)) {\n                return STATE_BEGAN;\n            }\n            return state | STATE_CHANGED;\n        }\n        return STATE_FAILED;\n    }\n});\n\n/**\n * Pan\n * Recognized when the pointer is down and moved in the allowed direction.\n * @constructor\n * @extends AttrRecognizer\n */\nfunction PanRecognizer() {\n    AttrRecognizer.apply(this, arguments);\n\n    this.pX = null;\n    this.pY = null;\n}\n\ninherit(PanRecognizer, AttrRecognizer, {\n    /**\n     * @namespace\n     * @memberof PanRecognizer\n     */\n    defaults: {\n        event: 'pan',\n        threshold: 10,\n        pointers: 1,\n        direction: DIRECTION_ALL\n    },\n\n    getTouchAction: function() {\n        var direction = this.options.direction;\n        var actions = [];\n        if (direction & DIRECTION_HORIZONTAL) {\n            actions.push(TOUCH_ACTION_PAN_Y);\n        }\n        if (direction & DIRECTION_VERTICAL) {\n            actions.push(TOUCH_ACTION_PAN_X);\n        }\n        return actions;\n    },\n\n    directionTest: function(input) {\n        var options = this.options;\n        var hasMoved = true;\n        var distance = input.distance;\n        var direction = input.direction;\n        var x = input.deltaX;\n        var y = input.deltaY;\n\n        // lock to axis?\n        if (!(direction & options.direction)) {\n            if (options.direction & DIRECTION_HORIZONTAL) {\n                direction = (x === 0) ? DIRECTION_NONE : (x < 0) ? DIRECTION_LEFT : DIRECTION_RIGHT;\n                hasMoved = x != this.pX;\n                distance = Math.abs(input.deltaX);\n            } else {\n                direction = (y === 0) ? DIRECTION_NONE : (y < 0) ? DIRECTION_UP : DIRECTION_DOWN;\n                hasMoved = y != this.pY;\n                distance = Math.abs(input.deltaY);\n            }\n        }\n        input.direction = direction;\n        return hasMoved && distance > options.threshold && direction & options.direction;\n    },\n\n    attrTest: function(input) {\n        return AttrRecognizer.prototype.attrTest.call(this, input) &&\n            (this.state & STATE_BEGAN || (!(this.state & STATE_BEGAN) && this.directionTest(input)));\n    },\n\n    emit: function(input) {\n\n        this.pX = input.deltaX;\n        this.pY = input.deltaY;\n\n        var direction = directionStr(input.direction);\n\n        if (direction) {\n            input.additionalEvent = this.options.event + direction;\n        }\n        this._super.emit.call(this, input);\n    }\n});\n\n/**\n * Pinch\n * Recognized when two or more pointers are moving toward (zoom-in) or away from each other (zoom-out).\n * @constructor\n * @extends AttrRecognizer\n */\nfunction PinchRecognizer() {\n    AttrRecognizer.apply(this, arguments);\n}\n\ninherit(PinchRecognizer, AttrRecognizer, {\n    /**\n     * @namespace\n     * @memberof PinchRecognizer\n     */\n    defaults: {\n        event: 'pinch',\n        threshold: 0,\n        pointers: 2\n    },\n\n    getTouchAction: function() {\n        return [TOUCH_ACTION_NONE];\n    },\n\n    attrTest: function(input) {\n        return this._super.attrTest.call(this, input) &&\n            (Math.abs(input.scale - 1) > this.options.threshold || this.state & STATE_BEGAN);\n    },\n\n    emit: function(input) {\n        if (input.scale !== 1) {\n            var inOut = input.scale < 1 ? 'in' : 'out';\n            input.additionalEvent = this.options.event + inOut;\n        }\n        this._super.emit.call(this, input);\n    }\n});\n\n/**\n * Press\n * Recognized when the pointer is down for x ms without any movement.\n * @constructor\n * @extends Recognizer\n */\nfunction PressRecognizer() {\n    Recognizer.apply(this, arguments);\n\n    this._timer = null;\n    this._input = null;\n}\n\ninherit(PressRecognizer, Recognizer, {\n    /**\n     * @namespace\n     * @memberof PressRecognizer\n     */\n    defaults: {\n        event: 'press',\n        pointers: 1,\n        time: 251, // minimal time of the pointer to be pressed\n        threshold: 9 // a minimal movement is ok, but keep it low\n    },\n\n    getTouchAction: function() {\n        return [TOUCH_ACTION_AUTO];\n    },\n\n    process: function(input) {\n        var options = this.options;\n        var validPointers = input.pointers.length === options.pointers;\n        var validMovement = input.distance < options.threshold;\n        var validTime = input.deltaTime > options.time;\n\n        this._input = input;\n\n        // we only allow little movement\n        // and we've reached an end event, so a tap is possible\n        if (!validMovement || !validPointers || (input.eventType & (INPUT_END | INPUT_CANCEL) && !validTime)) {\n            this.reset();\n        } else if (input.eventType & INPUT_START) {\n            this.reset();\n            this._timer = setTimeoutContext(function() {\n                this.state = STATE_RECOGNIZED;\n                this.tryEmit();\n            }, options.time, this);\n        } else if (input.eventType & INPUT_END) {\n            return STATE_RECOGNIZED;\n        }\n        return STATE_FAILED;\n    },\n\n    reset: function() {\n        clearTimeout(this._timer);\n    },\n\n    emit: function(input) {\n        if (this.state !== STATE_RECOGNIZED) {\n            return;\n        }\n\n        if (input && (input.eventType & INPUT_END)) {\n            this.manager.emit(this.options.event + 'up', input);\n        } else {\n            this._input.timeStamp = now();\n            this.manager.emit(this.options.event, this._input);\n        }\n    }\n});\n\n/**\n * Rotate\n * Recognized when two or more pointer are moving in a circular motion.\n * @constructor\n * @extends AttrRecognizer\n */\nfunction RotateRecognizer() {\n    AttrRecognizer.apply(this, arguments);\n}\n\ninherit(RotateRecognizer, AttrRecognizer, {\n    /**\n     * @namespace\n     * @memberof RotateRecognizer\n     */\n    defaults: {\n        event: 'rotate',\n        threshold: 0,\n        pointers: 2\n    },\n\n    getTouchAction: function() {\n        return [TOUCH_ACTION_NONE];\n    },\n\n    attrTest: function(input) {\n        return this._super.attrTest.call(this, input) &&\n            (Math.abs(input.rotation) > this.options.threshold || this.state & STATE_BEGAN);\n    }\n});\n\n/**\n * Swipe\n * Recognized when the pointer is moving fast (velocity), with enough distance in the allowed direction.\n * @constructor\n * @extends AttrRecognizer\n */\nfunction SwipeRecognizer() {\n    AttrRecognizer.apply(this, arguments);\n}\n\ninherit(SwipeRecognizer, AttrRecognizer, {\n    /**\n     * @namespace\n     * @memberof SwipeRecognizer\n     */\n    defaults: {\n        event: 'swipe',\n        threshold: 10,\n        velocity: 0.3,\n        direction: DIRECTION_HORIZONTAL | DIRECTION_VERTICAL,\n        pointers: 1\n    },\n\n    getTouchAction: function() {\n        return PanRecognizer.prototype.getTouchAction.call(this);\n    },\n\n    attrTest: function(input) {\n        var direction = this.options.direction;\n        var velocity;\n\n        if (direction & (DIRECTION_HORIZONTAL | DIRECTION_VERTICAL)) {\n            velocity = input.overallVelocity;\n        } else if (direction & DIRECTION_HORIZONTAL) {\n            velocity = input.overallVelocityX;\n        } else if (direction & DIRECTION_VERTICAL) {\n            velocity = input.overallVelocityY;\n        }\n\n        return this._super.attrTest.call(this, input) &&\n            direction & input.offsetDirection &&\n            input.distance > this.options.threshold &&\n            input.maxPointers == this.options.pointers &&\n            abs(velocity) > this.options.velocity && input.eventType & INPUT_END;\n    },\n\n    emit: function(input) {\n        var direction = directionStr(input.offsetDirection);\n        if (direction) {\n            this.manager.emit(this.options.event + direction, input);\n        }\n\n        this.manager.emit(this.options.event, input);\n    }\n});\n\n/**\n * A tap is ecognized when the pointer is doing a small tap/click. Multiple taps are recognized if they occur\n * between the given interval and position. The delay option can be used to recognize multi-taps without firing\n * a single tap.\n *\n * The eventData from the emitted event contains the property `tapCount`, which contains the amount of\n * multi-taps being recognized.\n * @constructor\n * @extends Recognizer\n */\nfunction TapRecognizer() {\n    Recognizer.apply(this, arguments);\n\n    // previous time and center,\n    // used for tap counting\n    this.pTime = false;\n    this.pCenter = false;\n\n    this._timer = null;\n    this._input = null;\n    this.count = 0;\n}\n\ninherit(TapRecognizer, Recognizer, {\n    /**\n     * @namespace\n     * @memberof PinchRecognizer\n     */\n    defaults: {\n        event: 'tap',\n        pointers: 1,\n        taps: 1,\n        interval: 300, // max time between the multi-tap taps\n        time: 250, // max time of the pointer to be down (like finger on the screen)\n        threshold: 9, // a minimal movement is ok, but keep it low\n        posThreshold: 10 // a multi-tap can be a bit off the initial position\n    },\n\n    getTouchAction: function() {\n        return [TOUCH_ACTION_MANIPULATION];\n    },\n\n    process: function(input) {\n        var options = this.options;\n\n        var validPointers = input.pointers.length === options.pointers;\n        var validMovement = input.distance < options.threshold;\n        var validTouchTime = input.deltaTime < options.time;\n\n        this.reset();\n\n        if ((input.eventType & INPUT_START) && (this.count === 0)) {\n            return this.failTimeout();\n        }\n\n        // we only allow little movement\n        // and we've reached an end event, so a tap is possible\n        if (validMovement && validTouchTime && validPointers) {\n            if (input.eventType != INPUT_END) {\n                return this.failTimeout();\n            }\n\n            var validInterval = this.pTime ? (input.timeStamp - this.pTime < options.interval) : true;\n            var validMultiTap = !this.pCenter || getDistance(this.pCenter, input.center) < options.posThreshold;\n\n            this.pTime = input.timeStamp;\n            this.pCenter = input.center;\n\n            if (!validMultiTap || !validInterval) {\n                this.count = 1;\n            } else {\n                this.count += 1;\n            }\n\n            this._input = input;\n\n            // if tap count matches we have recognized it,\n            // else it has began recognizing...\n            var tapCount = this.count % options.taps;\n            if (tapCount === 0) {\n                // no failing requirements, immediately trigger the tap event\n                // or wait as long as the multitap interval to trigger\n                if (!this.hasRequireFailures()) {\n                    return STATE_RECOGNIZED;\n                } else {\n                    this._timer = setTimeoutContext(function() {\n                        this.state = STATE_RECOGNIZED;\n                        this.tryEmit();\n                    }, options.interval, this);\n                    return STATE_BEGAN;\n                }\n            }\n        }\n        return STATE_FAILED;\n    },\n\n    failTimeout: function() {\n        this._timer = setTimeoutContext(function() {\n            this.state = STATE_FAILED;\n        }, this.options.interval, this);\n        return STATE_FAILED;\n    },\n\n    reset: function() {\n        clearTimeout(this._timer);\n    },\n\n    emit: function() {\n        if (this.state == STATE_RECOGNIZED) {\n            this._input.tapCount = this.count;\n            this.manager.emit(this.options.event, this._input);\n        }\n    }\n});\n\n/**\n * Simple way to create a manager with a default set of recognizers.\n * @param {HTMLElement} element\n * @param {Object} [options]\n * @constructor\n */\nfunction Hammer(element, options) {\n    options = options || {};\n    options.recognizers = ifUndefined(options.recognizers, Hammer.defaults.preset);\n    return new Manager(element, options);\n}\n\n/**\n * @const {string}\n */\nHammer.VERSION = '2.0.7';\n\n/**\n * default settings\n * @namespace\n */\nHammer.defaults = {\n    /**\n     * set if DOM events are being triggered.\n     * But this is slower and unused by simple implementations, so disabled by default.\n     * @type {Boolean}\n     * @default false\n     */\n    domEvents: false,\n\n    /**\n     * The value for the touchAction property/fallback.\n     * When set to `compute` it will magically set the correct value based on the added recognizers.\n     * @type {String}\n     * @default compute\n     */\n    touchAction: TOUCH_ACTION_COMPUTE,\n\n    /**\n     * @type {Boolean}\n     * @default true\n     */\n    enable: true,\n\n    /**\n     * EXPERIMENTAL FEATURE -- can be removed/changed\n     * Change the parent input target element.\n     * If Null, then it is being set the to main element.\n     * @type {Null|EventTarget}\n     * @default null\n     */\n    inputTarget: null,\n\n    /**\n     * force an input class\n     * @type {Null|Function}\n     * @default null\n     */\n    inputClass: null,\n\n    /**\n     * Default recognizer setup when calling `Hammer()`\n     * When creating a new Manager these will be skipped.\n     * @type {Array}\n     */\n    preset: [\n        // RecognizerClass, options, [recognizeWith, ...], [requireFailure, ...]\n        [RotateRecognizer, {enable: false}],\n        [PinchRecognizer, {enable: false}, ['rotate']],\n        [SwipeRecognizer, {direction: DIRECTION_HORIZONTAL}],\n        [PanRecognizer, {direction: DIRECTION_HORIZONTAL}, ['swipe']],\n        [TapRecognizer],\n        [TapRecognizer, {event: 'doubletap', taps: 2}, ['tap']],\n        [PressRecognizer]\n    ],\n\n    /**\n     * Some CSS properties can be used to improve the working of Hammer.\n     * Add them to this method and they will be set when creating a new Manager.\n     * @namespace\n     */\n    cssProps: {\n        /**\n         * Disables text selection to improve the dragging gesture. Mainly for desktop browsers.\n         * @type {String}\n         * @default 'none'\n         */\n        userSelect: 'none',\n\n        /**\n         * Disable the Windows Phone grippers when pressing an element.\n         * @type {String}\n         * @default 'none'\n         */\n        touchSelect: 'none',\n\n        /**\n         * Disables the default callout shown when you touch and hold a touch target.\n         * On iOS, when you touch and hold a touch target such as a link, Safari displays\n         * a callout containing information about the link. This property allows you to disable that callout.\n         * @type {String}\n         * @default 'none'\n         */\n        touchCallout: 'none',\n\n        /**\n         * Specifies whether zooming is enabled. Used by IE10>\n         * @type {String}\n         * @default 'none'\n         */\n        contentZooming: 'none',\n\n        /**\n         * Specifies that an entire element should be draggable instead of its contents. Mainly for desktop browsers.\n         * @type {String}\n         * @default 'none'\n         */\n        userDrag: 'none',\n\n        /**\n         * Overrides the highlight color shown when the user taps a link or a JavaScript\n         * clickable element in iOS. This property obeys the alpha value, if specified.\n         * @type {String}\n         * @default 'rgba(0,0,0,0)'\n         */\n        tapHighlightColor: 'rgba(0,0,0,0)'\n    }\n};\n\nvar STOP = 1;\nvar FORCED_STOP = 2;\n\n/**\n * Manager\n * @param {HTMLElement} element\n * @param {Object} [options]\n * @constructor\n */\nfunction Manager(element, options) {\n    this.options = assign({}, Hammer.defaults, options || {});\n\n    this.options.inputTarget = this.options.inputTarget || element;\n\n    this.handlers = {};\n    this.session = {};\n    this.recognizers = [];\n    this.oldCssProps = {};\n\n    this.element = element;\n    this.input = createInputInstance(this);\n    this.touchAction = new TouchAction(this, this.options.touchAction);\n\n    toggleCssProps(this, true);\n\n    each(this.options.recognizers, function(item) {\n        var recognizer = this.add(new (item[0])(item[1]));\n        item[2] && recognizer.recognizeWith(item[2]);\n        item[3] && recognizer.requireFailure(item[3]);\n    }, this);\n}\n\nManager.prototype = {\n    /**\n     * set options\n     * @param {Object} options\n     * @returns {Manager}\n     */\n    set: function(options) {\n        assign(this.options, options);\n\n        // Options that need a little more setup\n        if (options.touchAction) {\n            this.touchAction.update();\n        }\n        if (options.inputTarget) {\n            // Clean up existing event listeners and reinitialize\n            this.input.destroy();\n            this.input.target = options.inputTarget;\n            this.input.init();\n        }\n        return this;\n    },\n\n    /**\n     * stop recognizing for this session.\n     * This session will be discarded, when a new [input]start event is fired.\n     * When forced, the recognizer cycle is stopped immediately.\n     * @param {Boolean} [force]\n     */\n    stop: function(force) {\n        this.session.stopped = force ? FORCED_STOP : STOP;\n    },\n\n    /**\n     * run the recognizers!\n     * called by the inputHandler function on every movement of the pointers (touches)\n     * it walks through all the recognizers and tries to detect the gesture that is being made\n     * @param {Object} inputData\n     */\n    recognize: function(inputData) {\n        var session = this.session;\n        if (session.stopped) {\n            return;\n        }\n\n        // run the touch-action polyfill\n        this.touchAction.preventDefaults(inputData);\n\n        var recognizer;\n        var recognizers = this.recognizers;\n\n        // this holds the recognizer that is being recognized.\n        // so the recognizer's state needs to be BEGAN, CHANGED, ENDED or RECOGNIZED\n        // if no recognizer is detecting a thing, it is set to `null`\n        var curRecognizer = session.curRecognizer;\n\n        // reset when the last recognizer is recognized\n        // or when we're in a new session\n        if (!curRecognizer || (curRecognizer && curRecognizer.state & STATE_RECOGNIZED)) {\n            curRecognizer = session.curRecognizer = null;\n        }\n\n        var i = 0;\n        while (i < recognizers.length) {\n            recognizer = recognizers[i];\n\n            // find out if we are allowed try to recognize the input for this one.\n            // 1.   allow if the session is NOT forced stopped (see the .stop() method)\n            // 2.   allow if we still haven't recognized a gesture in this session, or the this recognizer is the one\n            //      that is being recognized.\n            // 3.   allow if the recognizer is allowed to run simultaneous with the current recognized recognizer.\n            //      this can be setup with the `recognizeWith()` method on the recognizer.\n            if (session.stopped !== FORCED_STOP && ( // 1\n                    !curRecognizer || recognizer == curRecognizer || // 2\n                    recognizer.canRecognizeWith(curRecognizer))) { // 3\n                recognizer.recognize(inputData);\n            } else {\n                recognizer.reset();\n            }\n\n            // if the recognizer has been recognizing the input as a valid gesture, we want to store this one as the\n            // current active recognizer. but only if we don't already have an active recognizer\n            if (!curRecognizer && recognizer.state & (STATE_BEGAN | STATE_CHANGED | STATE_ENDED)) {\n                curRecognizer = session.curRecognizer = recognizer;\n            }\n            i++;\n        }\n    },\n\n    /**\n     * get a recognizer by its event name.\n     * @param {Recognizer|String} recognizer\n     * @returns {Recognizer|Null}\n     */\n    get: function(recognizer) {\n        if (recognizer instanceof Recognizer) {\n            return recognizer;\n        }\n\n        var recognizers = this.recognizers;\n        for (var i = 0; i < recognizers.length; i++) {\n            if (recognizers[i].options.event == recognizer) {\n                return recognizers[i];\n            }\n        }\n        return null;\n    },\n\n    /**\n     * add a recognizer to the manager\n     * existing recognizers with the same event name will be removed\n     * @param {Recognizer} recognizer\n     * @returns {Recognizer|Manager}\n     */\n    add: function(recognizer) {\n        if (invokeArrayArg(recognizer, 'add', this)) {\n            return this;\n        }\n\n        // remove existing\n        var existing = this.get(recognizer.options.event);\n        if (existing) {\n            this.remove(existing);\n        }\n\n        this.recognizers.push(recognizer);\n        recognizer.manager = this;\n\n        this.touchAction.update();\n        return recognizer;\n    },\n\n    /**\n     * remove a recognizer by name or instance\n     * @param {Recognizer|String} recognizer\n     * @returns {Manager}\n     */\n    remove: function(recognizer) {\n        if (invokeArrayArg(recognizer, 'remove', this)) {\n            return this;\n        }\n\n        recognizer = this.get(recognizer);\n\n        // let's make sure this recognizer exists\n        if (recognizer) {\n            var recognizers = this.recognizers;\n            var index = inArray(recognizers, recognizer);\n\n            if (index !== -1) {\n                recognizers.splice(index, 1);\n                this.touchAction.update();\n            }\n        }\n\n        return this;\n    },\n\n    /**\n     * bind event\n     * @param {String} events\n     * @param {Function} handler\n     * @returns {EventEmitter} this\n     */\n    on: function(events, handler) {\n        if (events === undefined) {\n            return;\n        }\n        if (handler === undefined) {\n            return;\n        }\n\n        var handlers = this.handlers;\n        each(splitStr(events), function(event) {\n            handlers[event] = handlers[event] || [];\n            handlers[event].push(handler);\n        });\n        return this;\n    },\n\n    /**\n     * unbind event, leave emit blank to remove all handlers\n     * @param {String} events\n     * @param {Function} [handler]\n     * @returns {EventEmitter} this\n     */\n    off: function(events, handler) {\n        if (events === undefined) {\n            return;\n        }\n\n        var handlers = this.handlers;\n        each(splitStr(events), function(event) {\n            if (!handler) {\n                delete handlers[event];\n            } else {\n                handlers[event] && handlers[event].splice(inArray(handlers[event], handler), 1);\n            }\n        });\n        return this;\n    },\n\n    /**\n     * emit event to the listeners\n     * @param {String} event\n     * @param {Object} data\n     */\n    emit: function(event, data) {\n        // we also want to trigger dom events\n        if (this.options.domEvents) {\n            triggerDomEvent(event, data);\n        }\n\n        // no handlers, so skip it all\n        var handlers = this.handlers[event] && this.handlers[event].slice();\n        if (!handlers || !handlers.length) {\n            return;\n        }\n\n        data.type = event;\n        data.preventDefault = function() {\n            data.srcEvent.preventDefault();\n        };\n\n        var i = 0;\n        while (i < handlers.length) {\n            handlers[i](data);\n            i++;\n        }\n    },\n\n    /**\n     * destroy the manager and unbinds all events\n     * it doesn't unbind dom events, that is the user own responsibility\n     */\n    destroy: function() {\n        this.element && toggleCssProps(this, false);\n\n        this.handlers = {};\n        this.session = {};\n        this.input.destroy();\n        this.element = null;\n    }\n};\n\n/**\n * add/remove the css properties as defined in manager.options.cssProps\n * @param {Manager} manager\n * @param {Boolean} add\n */\nfunction toggleCssProps(manager, add) {\n    var element = manager.element;\n    if (!element.style) {\n        return;\n    }\n    var prop;\n    each(manager.options.cssProps, function(value, name) {\n        prop = prefixed(element.style, name);\n        if (add) {\n            manager.oldCssProps[prop] = element.style[prop];\n            element.style[prop] = value;\n        } else {\n            element.style[prop] = manager.oldCssProps[prop] || '';\n        }\n    });\n    if (!add) {\n        manager.oldCssProps = {};\n    }\n}\n\n/**\n * trigger dom event\n * @param {String} event\n * @param {Object} data\n */\nfunction triggerDomEvent(event, data) {\n    var gestureEvent = document.createEvent('Event');\n    gestureEvent.initEvent(event, true, true);\n    gestureEvent.gesture = data;\n    data.target.dispatchEvent(gestureEvent);\n}\n\nassign(Hammer, {\n    INPUT_START: INPUT_START,\n    INPUT_MOVE: INPUT_MOVE,\n    INPUT_END: INPUT_END,\n    INPUT_CANCEL: INPUT_CANCEL,\n\n    STATE_POSSIBLE: STATE_POSSIBLE,\n    STATE_BEGAN: STATE_BEGAN,\n    STATE_CHANGED: STATE_CHANGED,\n    STATE_ENDED: STATE_ENDED,\n    STATE_RECOGNIZED: STATE_RECOGNIZED,\n    STATE_CANCELLED: STATE_CANCELLED,\n    STATE_FAILED: STATE_FAILED,\n\n    DIRECTION_NONE: DIRECTION_NONE,\n    DIRECTION_LEFT: DIRECTION_LEFT,\n    DIRECTION_RIGHT: DIRECTION_RIGHT,\n    DIRECTION_UP: DIRECTION_UP,\n    DIRECTION_DOWN: DIRECTION_DOWN,\n    DIRECTION_HORIZONTAL: DIRECTION_HORIZONTAL,\n    DIRECTION_VERTICAL: DIRECTION_VERTICAL,\n    DIRECTION_ALL: DIRECTION_ALL,\n\n    Manager: Manager,\n    Input: Input,\n    TouchAction: TouchAction,\n\n    TouchInput: TouchInput,\n    MouseInput: MouseInput,\n    PointerEventInput: PointerEventInput,\n    TouchMouseInput: TouchMouseInput,\n    SingleTouchInput: SingleTouchInput,\n\n    Recognizer: Recognizer,\n    AttrRecognizer: AttrRecognizer,\n    Tap: TapRecognizer,\n    Pan: PanRecognizer,\n    Swipe: SwipeRecognizer,\n    Pinch: PinchRecognizer,\n    Rotate: RotateRecognizer,\n    Press: PressRecognizer,\n\n    on: addEventListeners,\n    off: removeEventListeners,\n    each: each,\n    merge: merge,\n    extend: extend,\n    assign: assign,\n    inherit: inherit,\n    bindFn: bindFn,\n    prefixed: prefixed\n});\n\n// this prevents errors when Hammer is loaded in the presence of an AMD\n//  style loader but by script tag, not by the loader.\nvar freeGlobal = (typeof window !== 'undefined' ? window : (typeof self !== 'undefined' ? self : {})); // jshint ignore:line\nfreeGlobal.Hammer = Hammer;\n\nif (typeof define === 'function' && define.amd) {\n    define(function() {\n        return Hammer;\n    });\n} else if (typeof module != 'undefined' && module.exports) {\n    module.exports = Hammer;\n} else {\n    window[exportName] = Hammer;\n}\n\n})(window, document, 'Hammer');\n","/* global Hammer */\nimport \"hammerjs\";\n\nexport const Touch = ({ el, orientation, onStart, onMove, onEnd }) => {\n  const hammer = new Hammer.Manager(el, {});\n  hammer.add(new Hammer.Pan({\n    direction: orientation === \"vertical\"\n      ? Hammer.DIRECTION_VERTICAL\n      : orientation === \"all\"\n        ? Hammer.DIRECTION_ALL\n        : Hammer.DIRECTION_HORIZONTAL,\n    threshold: 0\n  }));\n  hammer.on(\"panstart\", onStart);\n  hammer.on(\"panmove\", onMove);\n  hammer.on(\"panend\", onEnd);\n\n  return {\n    destroy: () => {\n      hammer.off(\"panstart\", onStart);\n      hammer.off(\"panmove\", onMove);\n      hammer.off(\"panend\", onEnd);\n    }\n  };\n};","\nexport const classes = {\n  slider:    \"mithril-slider\",\n  content:   \"mithril-slider__content\",\n  before:    \"mithril-slider__before\",\n  after:     \"mithril-slider__after\"\n};\n","import m from \"mithril\";\nimport prop from \"./prop\";\nimport { Touch } from \"./touch\";\nimport { classes } from \"./classes\";\n\nconst DEFAULT_DURATION = 160;\nconst DEFAULT_CANCEL_DRAG_FACTOR = 1 / 5;\nconst DEFAULT_GROUP_SIZE = 1;\nconst DEFAULT_ORIENTATION = \"vertical\";\nconst DEFAULT_DIRECTION = 1;\nconst DEFAULT_OFFSET_X = 0;\nconst DEFAULT_OFFSET_Y = 0;\n\nconst view = ({state, attrs}) => {\n  if (attrs.sliderController) {\n    attrs.sliderController(state);\n  }\n  const currentIndex = state.index();\n  // sizes need to be set each redraw because of screen resizes\n  state.groupBy(attrs.groupBy || 1);\n  const contentEl = state.contentEl;\n  if (contentEl) {\n    state.updateContentSize(contentEl);\n  }\n  return m(\"div\",\n    {\n      class: [\n        classes.slider,\n        attrs.class || \"\"\n      ].join(\" \")\n    },\n    [\n      attrs.before\n        ? m(\".\" + classes.before, attrs.before)\n        : null,\n      m(\"div\",\n        {\n          class: classes.content,\n          onupdate: ({dom}) => {\n            if (state.inited) {\n              return;\n            }\n            if (dom.childNodes.length > 0) {\n              state.setContentEl(dom);\n              state.updateContentSize(dom);\n              state.touch = new Touch({\n                el: dom,\n                orientation: attrs.orientation,\n                onStart: state.handleDragStart,\n                onMove: state.handleDrag,\n                onEnd: state.handleDragEnd\n              });\n              state.inited = true;\n            }\n          },\n          onremove: () => state.touch && state.touch.destroy()\n        },\n        state.list().map((data, listIndex) =>\n          attrs.page({\n            data,\n            listIndex,\n            currentIndex\n          })\n        )\n      ),\n      attrs.after\n        ? m(\".\" + classes.after, attrs.after)\n        : null\n    ]\n  );\n};\n\nconst oninit = vnode => {\n  const attrs = vnode.attrs;\n  const list = prop([]);\n  if (attrs.pageData) {\n    attrs.pageData().then(result => initWithResult(result));\n  }\n  const duration = parseInt(attrs.duration, 10) || DEFAULT_DURATION;\n  const index = prop(attrs.index || -1);\n  let contentEl;\n  let pageSize = 0;\n  const groupBy = prop(attrs.groupBy || DEFAULT_GROUP_SIZE);\n  const cancelDragFactor = attrs.cancelDragFactor || DEFAULT_CANCEL_DRAG_FACTOR;\n  const isVertical = attrs.orientation === DEFAULT_ORIENTATION;\n  const dir = attrs.rtl ? -1 : DEFAULT_DIRECTION;\n  const pageOffsetX = attrs.pageOffsetX || DEFAULT_OFFSET_X;\n  const pageOffsetY = attrs.pageOffsetY || DEFAULT_OFFSET_Y;\n\n  const initWithResult = result => {\n    list(result);\n    // First redraw so that pages are drawn\n    // continuation in view's oncreate\n    m.redraw();\n  };\n\n  const setIndex = idx => {\n    const oldIndex = index();\n    if (oldIndex !== idx) {\n      index(idx);\n      m.redraw();\n      if (attrs.getState) {\n        const el = contentEl;\n        const page = getPageEl(el, index());\n        attrs.getState({\n          index: idx,\n          hasNext: hasNext(),\n          hasPrevious: hasPrevious(),\n          pageEl: page\n        });\n      }\n    }\n  };\n\n  const getPageEl = (el, idx) => el.childNodes[idx];\n\n  const createAttrs = value => {\n    const x = isVertical ? \"0\" : value + \"px\";\n    const y = isVertical ? value + \"px\" : \"0\";\n    const z = \"0\";\n    const attrs = [x, y, z].join(\", \");\n    return \"translate3d(\" + attrs + \")\";\n  };\n\n  const setTransitionStyle = (el, value) => {\n    const style = el.style;\n    style.transform = style[\"-webkit-transform\"] = style[\"-moz-transform\"] = style[\"-ms-transform\"] = createAttrs(value);\n  };\n\n  const setTransitionDurationStyle = duration => {\n    contentEl.style[\"-webkit-transition-duration\"] = contentEl.style[\"transition-duration\"] = duration + \"ms\";\n  };\n\n  const goTo = (idx, duration) => {\n    if (idx < 0 || idx > list().length - 1) {\n      return;\n    }\n    updateContentSize(contentEl);\n    if (duration !== undefined) {\n      setTransitionDurationStyle(duration);\n    }\n    setTransitionStyle(contentEl, -dir * idx * pageSize);\n    setIndex(idx);\n  };\n\n  const normalizedStep = (orientation = 0) => {\n    const idx = index();\n    const size = groupBy();\n    const min = 0;\n    const max = list().length;\n    const next = idx + (orientation * size);\n    // make sure that last item aligns at the right\n    if ((next + size) > max) {\n      return max - size;\n    }\n    if (next < min) {\n      return min;\n    }\n    return next;\n  };\n\n  const updateContentSize = el => {\n    const prop = isVertical ? \"height\" : \"width\";\n    const page = el.childNodes[0];\n    if (page.getBoundingClientRect()[prop]) {\n      pageSize = page.getBoundingClientRect()[prop];\n      el.style[prop] = (list().length * pageSize) + \"px\";\n    }\n  };\n\n  const goCurrent = (duration = 0) => {\n    updateContentSize(contentEl);\n    setTransitionDurationStyle(duration);\n    goTo(normalizedStep());\n  };\n\n  const goNext = (dur = duration) => (\n    setTransitionDurationStyle(dur),\n    index() < list().length ? goTo(normalizedStep(1)) : goTo(normalizedStep())\n  );\n\n  const goPrevious = (dur = duration) => (\n    setTransitionDurationStyle(dur),\n    index() > 0 ? goTo(normalizedStep(-1)) : goTo(normalizedStep())\n  );\n\n  const hasNext = () => index() + groupBy() < list().length;\n\n  const hasPrevious = () => index() > 0;\n\n  const setContentEl = el => {\n    contentEl = el;\n    updateContentSize(el);\n    goCurrent();\n  };\n\n  const handleDragStart = () => (\n    updateContentSize(contentEl),\n    setTransitionDurationStyle(0)\n  );\n\n  const handleDrag = e => {\n    const el = contentEl;\n    const page = getPageEl(el, index());\n    const delta = isVertical\n      ? e.deltaY + pageOffsetY\n      : e.deltaX + pageOffsetX;\n    const origin = isVertical\n      ? page.offsetTop\n      : dir === -1\n        ? page.offsetLeft - page.parentNode.clientWidth + page.clientWidth\n        : page.offsetLeft;\n    setTransitionStyle(el, delta - origin);\n    e.preventDefault();\n  };\n\n  const calculateTransitionDuration = velocity => {\n    const el = contentEl;\n    const page = getPageEl(el, index());\n    const width = page.clientWidth;\n    const speed = Math.abs(velocity) || 1;\n    let dur = 1 / speed * width;\n    if (dur > duration) {\n      dur = duration;\n    }\n    return dur;\n  };\n\n  const handleDragEnd = e => {\n    const dur = calculateTransitionDuration(e.velocity);\n    const delta = isVertical ? e.deltaY : e.deltaX;\n    if (Math.abs(delta) > pageSize * groupBy() * cancelDragFactor) {\n      if (dir * delta < 0) {\n        goNext(dur);\n      } else {\n        goPrevious(dur);\n      }\n    } else {\n      goCurrent(dur);\n    }\n  };\n\n  Object.assign(vnode.state, {\n    // component methods\n    list,\n    contentEl,\n    setContentEl,\n    handleDrag,\n    handleDragStart,\n    handleDragEnd,\n    groupBy,\n    updateContentSize,\n\n    // public interface\n    index,\n    hasNext,\n    hasPrevious,\n    goTo,\n    goCurrent,\n    goNext,\n    goPrevious\n  });\n};\n\nexport const slider = {\n  oninit,\n  view\n};\n","\nconst css = [{\n  \".mithril-slider\": {\n    overflow: \"hidden\",\n\n    \" .mithril-slider__content\": {\n      transitionProperty: \"transform\",\n      transitionTimingFunction: \"ease-out\",\n      // transition-duration set in js\n      transform: \"translate3d(0, 0, 0)\"\n    }\n  }\n}];\n\nexport { css };\n"],"names":["x","p","args","undefined","window","document","exportName","assign","VENDOR_PREFIXES","TEST_ELEMENT","createElement","TYPE_FUNCTION","round","Math","abs","now","Date","setTimeoutContext","fn","timeout","context","setTimeout","bindFn","invokeArrayArg","arg","Array","isArray","each","obj","iterator","i","forEach","length","call","hasOwnProperty","deprecate","method","name","message","deprecationMessage","e","Error","stack","replace","log","console","warn","apply","this","arguments","Object","target","TypeError","output","index","source","nextKey","extend","dest","src","merge","keys","inherit","child","base","properties","childP","baseP","prototype","create","constructor","_super","boolOrFn","val","_typeof","ifUndefined","val1","val2","addEventListeners","types","handler","splitStr","type","addEventListener","removeEventListeners","removeEventListener","hasParent","node","parent","parentNode","inStr","str","find","indexOf","trim","split","inArray","findByKey","toArray","slice","uniqueArray","key","sort","results","values","push","a","b","prefixed","property","prefix","prop","camelProp","toUpperCase","_uniqueId","getWindowForElement","element","doc","ownerDocument","defaultView","parentWindow","SUPPORT_TOUCH","SUPPORT_POINTER_EVENTS","SUPPORT_ONLY_TOUCH","test","navigator","userAgent","COMPUTE_INTERVAL","INPUT_START","INPUT_MOVE","INPUT_END","INPUT_CANCEL","DIRECTION_NONE","DIRECTION_LEFT","DIRECTION_RIGHT","DIRECTION_UP","DIRECTION_DOWN","DIRECTION_HORIZONTAL","DIRECTION_VERTICAL","DIRECTION_ALL","PROPS_XY","PROPS_CLIENT_XY","Input","manager","callback","self","options","inputTarget","domHandler","ev","enable","init","inputHandler","eventType","input","pointersLen","pointers","changedPointersLen","changedPointers","isFirst","isFinal","session","pointersLength","firstInput","simpleCloneInputData","firstMultiple","offsetCenter","center","getCenter","timeStamp","deltaTime","angle","getAngle","distance","getDistance","offset","offsetDelta","prevDelta","prevInput","deltaX","y","deltaY","computeDeltaXY","offsetDirection","getDirection","overallVelocity","getVelocity","overallVelocityX","overallVelocityY","scale","start","end","rotation","getRotation","maxPointers","velocity","velocityX","velocityY","direction","last","lastInterval","v","computeIntervalInputData","srcEvent","computeInputData","emit","recognize","clientX","clientY","p1","p2","props","sqrt","atan2","PI","evEl","evTarget","evWin","destroy","MOUSE_INPUT_MAP","mousedown","mousemove","mouseup","MOUSE_ELEMENT_EVENTS","MOUSE_WINDOW_EVENTS","MouseInput","pressed","button","which","pointerType","POINTER_INPUT_MAP","pointerdown","pointermove","pointerup","pointercancel","pointerout","IE10_POINTER_TYPE_ENUM","POINTER_ELEMENT_EVENTS","POINTER_WINDOW_EVENTS","PointerEventInput","store","pointerEvents","MSPointerEvent","PointerEvent","removePointer","eventTypeNormalized","toLowerCase","isTouch","storeIndex","pointerId","splice","SINGLE_TOUCH_INPUT_MAP","touchstart","touchmove","touchend","touchcancel","SINGLE_TOUCH_TARGET_EVENTS","SINGLE_TOUCH_WINDOW_EVENTS","SingleTouchInput","started","touches","all","changed","changedTouches","concat","TOUCH_INPUT_MAP","TOUCH_TARGET_EVENTS","TouchInput","targetIds","allTouches","identifier","targetTouches","changedTargetTouches","filter","touch","DEDUP_TIMEOUT","DEDUP_DISTANCE","TouchMouseInput","mouse","primaryTouch","lastTouches","setLastTouch","eventData","lastTouch","lts","inputEvent","inputData","isMouse","sourceCapabilities","firesTouchEvents","t","dx","dy","PREFIXED_TOUCH_ACTION","style","NATIVE_TOUCH_ACTION","TOUCH_ACTION_AUTO","TOUCH_ACTION_MANIPULATION","TOUCH_ACTION_NONE","TOUCH_ACTION_PAN_X","TOUCH_ACTION_PAN_Y","TOUCH_ACTION_MAP","touchMap","cssSupports","CSS","supports","getTouchActionProps","TouchAction","value","set","compute","actions","update","touchAction","recognizers","recognizer","getTouchAction","hasPanX","hasPanY","cleanTouchActions","join","preventDefaults","prevented","preventDefault","hasNone","isTapPointer","isTapMovement","isTapTouchTime","preventSrc","STATE_POSSIBLE","STATE_BEGAN","STATE_CHANGED","STATE_ENDED","STATE_RECOGNIZED","STATE_CANCELLED","Recognizer","defaults","id","state","simultaneous","requireFail","stateStr","directionStr","getRecognizerByNameIfManager","otherRecognizer","get","AttrRecognizer","PanRecognizer","pX","pY","PinchRecognizer","PressRecognizer","_timer","_input","RotateRecognizer","SwipeRecognizer","TapRecognizer","pTime","pCenter","count","Hammer","preset","Manager","recognizeWith","dropRecognizeWith","requireFailure","dropRequireFailure","hasRequireFailures","canRecognizeWith","event","additionalEvent","tryEmit","canEmit","inputDataClone","reset","process","attrTest","optionPointers","isRecognized","isValid","threshold","directionTest","hasMoved","inOut","time","validPointers","validMovement","validTime","clearTimeout","taps","interval","posThreshold","validTouchTime","failTimeout","validInterval","validMultiTap","tapCount","VERSION","domEvents","inputClass","cssProps","userSelect","touchSelect","touchCallout","contentZooming","userDrag","tapHighlightColor","handlers","oldCssProps","toggleCssProps","item","add","stop","force","stopped","curRecognizer","existing","remove","on","events","off","data","gestureEvent","createEvent","initEvent","gesture","dispatchEvent","triggerDomEvent","STATE_FAILED","Tap","Pan","Swipe","Pinch","Rotate","Press","define","amd","module","exports","Touch","el","orientation","onStart","onMove","onEnd","hammer","classes","slider","content","before","after","oninit","vnode","attrs","list","pageData","then","result","initWithResult","contentEl","duration","parseInt","pageSize","groupBy","cancelDragFactor","isVertical","dir","rtl","pageOffsetX","pageOffsetY","m","redraw","getPageEl","idx","childNodes","setTransitionStyle","transform","createAttrs","setTransitionDurationStyle","goTo","updateContentSize","getState","page","hasNext","hasPrevious","pageEl","setIndex","normalizedStep","size","max","next","getBoundingClientRect","goCurrent","goNext","dur","goPrevious","setContentEl","handleDrag","delta","origin","offsetTop","offsetLeft","clientWidth","handleDragStart","handleDragEnd","width","calculateTransitionDuration","view","sliderController","currentIndex","onupdate","dom","inited","onremove","map","listIndex","overflow","transitionProperty","transitionTimingFunction"],"mappings":"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"}